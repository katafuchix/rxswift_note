Observable.combineLatestを利用すると入力値がnullの際にも処理できる

@IBOutlet weak var textField1: UITextField!
@IBOutlet weak var textField2: UITextField!
@IBOutlet weak var label: UILabel!

Observable.combineLatest(textField1.rx.text.orEmpty, textField2.rx.text.orEmpty) { textValue1, textValue2  -> Int in
            return (Int(textValue1) ?? 0) + (Int(textValue2) ?? 0)
            }
            .map { $0.description }
            .bind(to: label.rx.text)
            .disposed(by: rx.disposeBag)
            
rx.textをasObservable()にしてsubscribeだとinputに関するイベントになってしまうので input以外で値を変更する場合に対応できないこともある
Observable.combineLatestの方が楽

        Observable.combineLatest(textField1.rx.text.orEmpty.asObservable(), textField2.rx.text.orEmpty.asObservable()).subscribe(onNext:
            { [weak self] val1, val2 in
                guard let _self = self else { return }
                _self.label.text = "\(val1) \(val2)"
            }
            , onError: nil, onCompleted: nil, onDisposed: nil).disposed(by: rx.disposeBag)
            

doはイベント動作前に行う動作の定義になります。戻り値はObservableです。
subscribeは監視の開始と同時に定義した動作を定義します。戻り値はDisposableです。
それぞれ別のタイミングと意図を持つものなので、場合によって使い分けます。
